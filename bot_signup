const FB = require('./facebook');

function sign_obj() {
    this.senderId = null;
    this.qes_arr = [
        {
            qes: 'What is your First Name ?',
            ans: null
        }
        ,
        {
            qes: 'What is your Last Name ?',
            ans: null
        }
        ,
        {
            qes: 'What is your Email (example@example.com)?',
            ans: null
        }
        ,
        {
            qes: 'Confirm your Email ?',
            ans: null
        }
        ,
        {
            qes: 'What is your Phone Number {(xxx) xxx-xxxx or xxx-xxx-xxxx }?',
            ans: null
        }
        ,
        {
            qes: 'What is your Birth Date (DD/MM/YYYY) ?',
            ans: null
        }
        ,
        {
            qes: 'What is your Zip Code ?',
            ans: null
        }
    ]
}

sign_obj.prototype.setSender = function (id) {
    this.senderId = id;
};
sign_obj.prototype.getIndx = function () {
    for (let i = 0; i < this.qes_arr.length; i++) {
        if (this.qes_arr[i].ans === null)
            return i;
    }
};
sign_obj.prototype.signProc = function (sender, msg) {
    let index = this.getIndx();
    if (msg === 'end000') {
        FB.fbMessage(sender, 'Your Signing-up Operation Has been Stopped , You can do that later at anytime you want ');
        return true;
    }
    switch (index) {
        case 0 : {
            this.qes_arr[0].ans = msg;
            FB.fbMessage(sender, this.qes_arr[1].qes);
            break;
        }

        case 1 : {
            this.qes_arr[1].ans = msg;
            FB.fbMessage(sender, this.qes_arr[2].qes);
            break;
        }

        case 2 : {
            let validMail = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            if (validMail.test(msg)) {
                this.qes_arr[2].ans = msg;
                FB.fbMessage(sender, this.qes_arr[3].qes);
                break;
            }
            else {
                FB.fbMessage(sender, 'Please Enter a Valid Email ' + this.qes_arr[2].qes);
                break;
            }
        }

        case 3 : {
            if (msg === this.qes_arr[2].ans) {
                this.qes_arr[3].ans = msg;
                FB.fbMessage(sender, this.qes_arr[4].qes);
                break;
            }
            else {
                this.qes_arr[2].ans = null;
                FB.fbMessage(sender, "Email is not Match please try again !!!!");
                FB.fbMessage(sender, this.qes_arr[2].qes);
                break;
            }
        }
        case 4 : {
            let validPhone = /^[(]{0,1}[0-9]{3}[)]{0,1}[-\s\.]{0,1}[0-9]{3}[-\s\.]{0,1}[0-9]{4}$/;
            if (validPhone.test(msg)) {
                this.qes_arr[4].ans = msg;
                FB.fbMessage(sender, this.qes_arr[5].qes);
                break;
            }
            else {
                FB.fbMessage(sender, 'Please Enter a Valid Phone Number ' + this.qes_arr[4].qes);
                break;
            }
        }


        case 5 : {
            let validDate = /^(0[1-9]|1[012])[-/.](0[1-9]|[12][0-9]|3[01])[-/.](19|20)\\d\\d$/;
            if (validDate.test(msg)) {
                this.qes_arr[5].ans = msg;
                FB.fbMessage(sender, this.qes_arr[6].qes);
                break;
            }
            else {
                FB.fbMessage(sender, 'Please Enter a Valid BirthDate ' + this.qes_arr[5].qes);
                break;
            }
        }

        case 6 : {
            let validZip = /(^\d{5}$)|(^\d{5}-\d{4}$)/;
            if (validZip.test(msg)) {
                this.qes_arr[6].ans = msg;
                FB.fbMessage(sender, "Your Registration has been completed Successfully");
                return true;
            }
            else {
                FB.fbMessage(sender, 'Please Enter a Valid Zip Code ' + this.qes_arr[6].qes);
                break;
            }
        }
    }

    return false;

};

var signQeue = [];

function qeueLook(sender) {
    for (let i = 0; i < signQeue.length; i++)
        if (signQeue[i].senderId === sender)
            return i;
}

function qeueAdd(sender) {
    let elem = new sign_obj();
    elem.setSender(sender);
    signQeue.push(elem);

}

function qeueDel(sender) {
    let elem = qeueLook(sender);
    if (elem > -1)
        signQeue.splice(elem, 1);
}

module.exports = {

    signQeue: signQeue,
    qeueLook: qeueLook,
    qeueAdd: qeueAdd,
    qeueDel: qeueDel,
    sign_obj: sign_obj

};